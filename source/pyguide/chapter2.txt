2. Python Language Rules
------------------------

2.1 Lint
^^^^^^^^

Run ``pylint`` over your code.

2.1.1 Definition
""""""""""""""""

``pylint`` is a tool for finding bugs and style problems in Python source code. It finds problems that are typically caught by a compiler for less dynamic languages like C and C++. Because of the dynamic nature of Python, some warnings may be incorrect; however, spurious warnings should be fairly infrequent.

2.1.2 Pros
""""""""""

Catches easy-to-miss errors like typos, using-vars-before-assignment, etc.

2.1.3 Cons
""""""""""

``pylint`` isn’t perfect. To take advantage of it, we’ll need to sometimes: a) Write around it b) Suppress its warnings or c) Improve it.

2.1.4 Decision
""""""""""""""

Make sure you run ``pylint`` on your code.

Suppress warnings if they are inappropriate so that other issues are not hidden. To suppress warnings, you can set a line-level comment:

.. code-block:: python

    dict = 'something awful'  # Bad Idea... pylint: disable=redefined-builtin

``pylint`` warnings are each identified by symbolic name (``empty-docstring``) Google-specific warnings start with ``g-``.

If the reason for the suppression is not clear from the symbolic name, add an explanation.

Suppressing in this way has the advantage that we can easily search for suppressions and revisit them.

You can get a list of ``pylint`` warnings by doing:

.. code-block:: python

    pylint --list-msgs

To get more information on a particular message, use:

.. code-block:: python

    pylint --help-msg=C6409

Prefer ``pylint: disable`` to the deprecated older form ``pylint: disable-msg``.

Unused argument warnings can be suppressed by deleting the variables at the beginning of the function. Always include a comment explaining why you are deleting it. “Unused.” is sufficient. For example:

.. code-block:: python

    def viking_cafe_order(spam, beans, eggs=None):
        del beans, eggs  # Unused by vikings.
        return spam + spam + spam

Other common forms of suppressing this warning include using '``_``' as the identifier for the unused argument, prefixing the argument name with '``unused_``', or assigning them to '``_``'. These forms are allowed but no longer encouraged. The first two break callers that pass arguments by name, while the last does not enforce that the arguments are actually unused.

2.2 Imports
^^^^^^^^^^^

Use ``import`` statements for packages and modules only, not for individual classes or functions. Note that there is an explicit exemption for imports from the `typing module <https://google.github.io/styleguide/pyguide.html#typing-imports>`_.

2.2.1 Definition
""""""""""""""""

Reusability mechanism for sharing code from one module to another.

2.2.2 Pros
""""""""""

The namespace management convention is simple. The source of each identifier is indicated in a consistent way; ``x.Obj`` says that object ``Obj`` is defined in module ``x``.

2.2.3 Cons
""""""""""

Module names can still collide. Some module names are inconveniently long.

2.2.4 Decision
""""""""""""""

* Use ``import x`` for importing packages and modules.
* Use ``from x import y`` where ``x`` is the package prefix and ``y`` is the module name with no prefix.
* Use ``from x import y as z`` if two modules named ``y`` are to be imported or if ``y`` is an inconveniently long name.
* Use ``import y as z`` only when ``z`` is a standard abbreviation (e.g., ``np`` for ``numpy``).

For example the module ``sound.effects.echo`` may be imported as follows:

.. code-block:: python

   from sound.effects import echo
   ...
   echo.EchoFilter(input, output, delay=0.7, atten=4)

Do not use relative names in imports. Even if the module is in the same package, use the full package name. This helps prevent unintentionally importing a package twice.

Imports from the `typing module <https://google.github.io/styleguide/pyguide.html#typing-imports>`_ are exempt from this rule.

2.3 Packages
^^^^^^^^^^^^

Import each module using the full pathname location of the module.

2.3.1 Pros
""""""""""

Avoids conflicts in module names or incorrect imports due to the module search path not being what the author expected. Makes it easier to find modules.

2.3.2 Cons
""""""""""

Makes it harder to deploy code because you have to replicate the package hierarchy. Not really a problem with modern deployment mechanisms.

2.3.3 Decision
""""""""""""""

All new code should import each module by its full package name.

Imports should be as follows:

Yes:

.. code-block:: python

    # Reference absl.flags in code with the complete name (verbose).
    import absl.flags
    from doctor.who import jodie

    FLAGS = absl.flags.FLAGS

.. code-block:: python

    # Reference flags in code with just the module name (common).
    from absl import flags
    from doctor.who import jodie

    FLAGS = flags.FLAGS

No: (assume this file lives in ``doctor/who/`` where ``jodie.py`` also exists)

.. code-block:: python

    # Unclear what module the author wanted and what will be imported.  The actual
    # import behavior depends on external factors controlling sys.path.
    # Which possible jodie module did the author intend to import?
    import jodie

The directory the main binary is located in should not be assumed to be in ``sys.path`` despite that happening in some environments. This being the case, code should assume that ``import jodie`` refers to a third party or top level package named ``jodie``, not a local ``jodie.py``.

2.4 Exceptions
^^^^^^^^^^^^^^

Exceptions are allowed but must be used carefully.

2.4.1 Definition
""""""""""""""""

Exceptions are a means of breaking out of the normal flow of control of a code block to handle errors or other exceptional conditions.

2.4.2 Pros
""""""""""

The control flow of normal operation code is not cluttered by error-handling code. It also allows the control flow to skip multiple frames when a certain condition occurs, e.g., returning from N nested functions in one step instead of having to carry-through error codes.

2.4.3 Cons
""""""""""

May cause the control flow to be confusing. Easy to miss error cases when making library calls.

2.4.4 Decision
""""""""""""""

Exceptions must follow certain conditions:

* Raise exceptions like this: ``raise MyError('Error message')`` or ``raise MyError()``. Do not use the two-argument form (``raise MyError, 'Error message'``).
* Make use of built-in exception classes when it makes sense. For example, raise a ``ValueError`` if you were passed a negative number but were expecting a positive one. Do not use ``assert`` statements for validating argument values of a public API. ``assert`` is used to ensure internal correctness, not to enforce correct usage nor to indicate that some unexpected event occurred. If an exception is desired in the latter cases, use a raise statement. For example:

  .. code-block:: python

    Yes:
      def connect_to_next_port(self, minimum):
        """Connects to the next available port.

        Args:
          minimum: A port value greater or equal to 1024.
        Raises:
          ValueError: If the minimum port specified is less than 1024.
          ConnectionError: If no available port is found.
        Returns:
          The new minimum port.
        """
        if minimum < 1024:
          raise ValueError('Minimum port must be at least 1024, not %d.' % (minimum,))
        port = self._find_next_open_port(minimum)
        if not port:
          raise ConnectionError('Could not connect to service on %d or higher.' % (minimum,))
        assert port >= minimum, 'Unexpected port %d when minimum was %d.' % (port, minimum)
        return port

  .. code-block:: python

    No:
      def connect_to_next_port(self, minimum):
        """Connects to the next available port.

        Args:
          minimum: A port value greater or equal to 1024.
        Returns:
          The new minimum port.
        """
        assert minimum >= 1024, 'Minimum port must be at least 1024.'
        port = self._find_next_open_port(minimum)
        assert port is not None
        return port

* Libraries or packages may define their own exceptions. When doing so they must inherit from an existing exception class. Exception names should end in ``Error`` and should not introduce stutter (``foo.FooError``).
* Never use catch-all ``except``: statements, or catch ``Exception`` or ``StandardError``, unless you are re-raising the exception or in the outermost block in your thread (and printing an error message). Python is very tolerant in this regard and ``except:`` will really catch everything including misspelled names, sys.exit() calls, Ctrl+C interrupts, unittest failures and all kinds of other exceptions that you simply don’t want to catch.
* Minimize the amount of code in a ``try``/``except`` block. The larger the body of the ``try``, the more likely that an exception will be raised by a line of code that you didn’t expect to raise an exception. In those cases, the ``try``/``except`` block hides a real error.
* Use the ``finally`` clause to execute code whether or not an exception is raised in the ``try`` block. This is often useful for cleanup, i.e., closing a file.
* When capturing an exception, use ``as`` rather than a comma. For example:

  .. code-block:: python

    try:
      raise Error()
    except Error as error:
      pass

2.5 Global variables
^^^^^^^^^^^^^^^^^^^^

Avoid global variables.

2.5.1 Definition
""""""""""""""""

Variables that are declared at the module level or as class attributes.

2.5.2 Pros
""""""""""

Occasionally useful.

2.5.3 Cons
""""""""""

Has the potential to change module behavior during the import, because assignments to global variables are done when the module is first imported.

2.5.4 Decision
""""""""""""""

Avoid global variables.

While they are technically variables, module-level constants are permitted and encouraged. For example: ``MAX_HOLY_HANDGRENADE_COUNT = 3``. Constants must be named using all caps with underscores. See Naming below.

If needed, globals should be declared at the module level and made internal to the module by prepending an ``_`` to the name. External access must be done through public module-level functions. See Naming below.

2.6 Nested/Local/Inner Classes and Functions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Nested local functions or classes are fine when used to close over a local variable. Inner classes are fine.

2.6.1 Definition
""""""""""""""""

A class can be defined inside of a method, function, or class. A function can be defined inside a method or function. Nested functions have read-only access to variables defined in enclosing scopes.

2.6.2 Pros
""""""""""

Allows definition of utility classes and functions that are only used inside of a very limited scope. Very `ADT <http://www.google.com/url?sa=D&q=http://en.wikipedia.org/wiki/Abstract_data_type>`_-y. Commonly used for implementing decorators.

2.6.3 Cons
""""""""""

Instances of nested or local classes cannot be pickled. Nested functions and classes cannot be directly tested. Nesting can make your outer function longer and less readable.

2.6.4 Decision
""""""""""""""

They are fine with some caveats. Avoid nested functions or classes except when closing over a local value. Do not nest a function just to hide it from users of a module. Instead, prefix its name with an _ at the module level so that it can still be accessed by tests.

2.7 Comprehensions & Generator Expressions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Okay to use for simple cases.

2.7.1 Definition
""""""""""""""""

List, Dict, and Set comprehensions as well as generator expressions provide a concise and efficient way to create container types and iterators without resorting to the use of traditional loops, ``map()``, ``filter()``, or ``lambda``.

2.7.2 Pros
""""""""""

Simple comprehensions can be clearer and simpler than other dict, list, or set creation techniques. Generator expressions can be very efficient, since they avoid the creation of a list entirely.

2.7.3 Cons
""""""""""

Complicated comprehensions or generator expressions can be hard to read.

2.7.4 Decision
""""""""""""""

Okay to use for simple cases. Each portion must fit on one line: mapping expression, ``for`` clause, filter expression. Multiple ``for`` clauses or filter expressions are not permitted. Use loops instead when things get more complicated.

.. code-block:: python

    Yes:
      result = [mapping_expr for value in iterable if filter_expr]

      result = [{'key': value} for value in iterable
                if a_long_filter_expression(value)]

      result = [complicated_transform(x)
                for x in iterable if predicate(x)]

      descriptive_name = [
          transform({'key': key, 'value': value}, color='black')
          for key, value in generate_iterable(some_input)
          if complicated_condition_is_met(key, value)
      ]

      result = []
      for x in range(10):
          for y in range(5):
              if x * y > 10:
                  result.append((x, y))

      return {x: complicated_transform(x)
              for x in long_generator_function(parameter)
              if x is not None}

      squares_generator = (x**2 for x in range(10))

      unique_names = {user.name for user in users if user is not None}

      eat(jelly_bean for jelly_bean in jelly_beans
          if jelly_bean.color == 'black')

.. code-block:: python

    No:
      result = [complicated_transform(
                    x, some_argument=x+1)
                for x in iterable if predicate(x)]

      result = [(x, y) for x in range(10) for y in range(5) if x * y > 10]

      return ((x, y, z)
              for x in xrange(5)
              for y in xrange(5)
              if x != y
              for z in xrange(5)
              if y != z)

2.8 Default Iterators and Operators
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Use default iterators and operators for types that support them, like lists, dictionaries, and files.

2.8.1 Definition
""""""""""""""""

Container types, like dictionaries and lists, define default iterators and membership test operators (“in” and “not in”).

2.8.2 Pros
""""""""""

The default iterators and operators are simple and efficient. They express the operation directly, without extra method calls. A function that uses default operators is generic. It can be used with any type that supports the operation.

2.8.3 Cons
""""""""""

You can’t tell the type of objects by reading the method names (e.g. has_key() means a dictionary). This is also an advantage.

2.8.4 Decision
""""""""""""""

Use default iterators and operators for types that support them, like lists, dictionaries, and files. The built-in types define iterator methods, too. Prefer these methods to methods that return lists, except that you should not mutate a container while iterating over it. Never use Python 2 specific iteration methods such as ``dict.iter*()`` unless necessary.

.. code-block:: python

    Yes:  for key in adict: ...
          if key not in adict: ...
          if obj in alist: ...
          for line in afile: ...
          for k, v in adict.items(): ...
          for k, v in six.iteritems(adict): ...

.. code-block:: python

    No:   for key in adict.keys(): ...
          if not adict.has_key(key): ...
          for line in afile.readlines(): ...
          for k, v in dict.iteritems(): ...

2.9 Generators
^^^^^^^^^^^^^^

Use generators as needed.

2.9.1 Definition
""""""""""""""""

A generator function returns an iterator that yields a value each time it executes a yield statement. After it yields a value, the runtime state of the generator function is suspended until the next value is needed.

2.9.2 Pros
""""""""""

Simpler code, because the state of local variables and control flow are preserved for each call. A generator uses less memory than a function that creates an entire list of values at once.

2.9.3 Cons
""""""""""

None.

2.9.4 Decision
""""""""""""""

Fine. Use “Yields:” rather than “Returns:” in the docstring for generator functions.

2.10 Lambda Functions
^^^^^^^^^^^^^^^^^^^^^

Okay for one-liners.

2.10.1 Definition
"""""""""""""""""

Lambdas define anonymous functions in an expression, as opposed to a statement. They are often used to define callbacks or operators for higher-order functions like ``map()`` and ``filter()``.

2.10.2 Pros
"""""""""""

Convenient.

2.10.3 Cons
"""""""""""

Harder to read and debug than local functions. The lack of names means stack traces are more difficult to understand. Expressiveness is limited because the function may only contain an expression.

2.10.4 Decision
"""""""""""""""

Okay to use them for one-liners. If the code inside the lambda function is longer than 60-80 chars, it’s probably better to define it as a regular nested function.

For common operations like multiplication, use the functions from the operator module instead of lambda functions. For example, prefer ``operator.mul`` to ``lambda x, y: x * y``.

2.11 Conditional Expressions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Okay for one-liners.

2.11.1 Definition
"""""""""""""""""

Conditional expressions (sometimes called a “ternary operator”) are mechanisms that provide a shorter syntax for if statements. For example: ``x = 1 if cond else 2``.

2.11.2 Pros
"""""""""""

Shorter and more convenient than an if statement.

2.11.3 Cons
"""""""""""

May be harder to read than an if statement. The condition may be difficult to locate if the expression is long.


2.11.4 Decision
"""""""""""""""

Okay to use for one-liners. In other cases prefer to use a complete if statement.

2.12 Default Argument Values
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Okay in most cases.

2.12.1 Definition
"""""""""""""""""

You can specify values for variables at the end of a function’s parameter list, e.g., ``def foo(a, b=0):``. If ``foo`` is called with only one argument, ``b`` is set to 0. If it is called with two arguments, ``b`` has the value of the second argument.

2.12.2 Pros
"""""""""""

Often you have a function that uses lots of default values, but-rarely-you want to override the defaults. Default argument values provide an easy way to do this, without having to define lots of functions for the rare exceptions. Also, Python does not support overloaded methods/functions and default arguments are an easy way of “faking” the overloading behavior.

2.12.3 Cons
"""""""""""

Default arguments are evaluated once at module load time. This may cause problems if the argument is a mutable object such as a list or a dictionary. If the function modifies the object (e.g., by appending an item to a list), the default value is modified.

2.12.4 Decision
"""""""""""""""

Okay to use with the following caveat:

Do not use mutable objects as default values in the function or method definition.

.. code-block:: python

    Yes: def foo(a, b=None):
             if b is None:
                 b = []
    Yes: def foo(a, b: Optional[Sequence] = None):
             if b is None:
                 b = []
    Yes: def foo(a, b: Sequence = ()):  # Empty tuple OK since tuples are immutable
             ...

.. code-block:: python

    No:  def foo(a, b=[]):
             ...
    No:  def foo(a, b=time.time()):  # The time the module was loaded???
             ...
    No:  def foo(a, b=FLAGS.my_thing):  # sys.argv has not yet been parsed...
             ...

2.13 Properties
^^^^^^^^^^^^^^^

Use properties for accessing or setting data where you would normally have used simple, lightweight accessor or setter methods.

2.13.1 Definition
"""""""""""""""""

A way to wrap method calls for getting and setting an attribute as a standard attribute access when the computation is lightweight.

2.13.2 Pros
"""""""""""

Readability is increased by eliminating explicit get and set method calls for simple attribute access. Allows calculations to be lazy. Considered the Pythonic way to maintain the interface of a class. In terms of performance, allowing properties bypasses needing trivial accessor methods when a direct variable access is reasonable. This also allows accessor methods to be added in the future without breaking the interface.

2.13.3 Cons
"""""""""""

Must inherit from ``object`` in Python 2. Can hide side-effects much like operator overloading. Can be confusing for subclasses.

2.13.4 Decision
"""""""""""""""

Use properties in new code to access or set data where you would normally have used simple, lightweight accessor or setter methods. Properties should be created with the ``@property`` decorator.

Inheritance with properties can be non-obvious if the property itself is not overridden. Thus one must make sure that accessor methods are called indirectly to ensure methods overridden in subclasses are called by the property (using the Template Method DP).

.. code-block:: python

    Yes: import math

         class Square(object):
             """A square with two properties: a writable area and a read-only perimeter.

             To use:
             >>> sq = Square(3)
             >>> sq.area
             9
             >>> sq.perimeter
             12
             >>> sq.area = 16
             >>> sq.side
             4
             >>> sq.perimeter
             16
             """

             def __init__(self, side):
                 self.side = side

             @property
             def area(self):
                 """Gets or sets the area of the square."""
                 return self._get_area()

             @area.setter
             def area(self, area):
                 return self._set_area(area)

             def _get_area(self):
                 """Indirect accessor to calculate the 'area' property."""
                 return self.side ** 2

             def _set_area(self, area):
                 """Indirect setter to set the 'area' property."""
                 self.side = math.sqrt(area)

             @property
             def perimeter(self):
                 return self.side * 4

2.14 True/False evaluations
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Use the “implicit” false if at all possible.

2.14.1 Definition
"""""""""""""""""

Python evaluates certain values as False when in a boolean context. A quick “rule of thumb” is that all “empty” values are considered false, so ``0, None, [], {}, ''`` all evaluate as false in a boolean context.

2.14.2 Pros
"""""""""""

Conditions using Python booleans are easier to read and less error-prone. In most cases, they’re also faster.

2.14.3 Cons
"""""""""""

May look strange to C/C++ developers.

2.14.4 Decision
"""""""""""""""

Use the “implicit” false if at all possible, e.g., ``if foo:`` rather than ``if foo != []:``. There are a few caveats that you should keep in mind though:

* Never use ``==`` or ``!=`` to compare singletons like ``None``. Use ``is`` or ``is not``.
* Beware of writing ``if x:`` when you really mean ``if x is not None:``-e.g., when testing whether a variable or argument that defaults to ``None`` was set to some other value. The other value might be a value that’s false in a boolean context!
* Never compare a boolean variable to ``False`` using ``==``. Use ``if not x:`` instead. If you need to distinguish ``False`` from ``None`` then chain the expressions, such as ``if not x and x is not None:``.
* For sequences (strings, lists, tuples), use the fact that empty sequences are false, so ``if seq:`` and ``if not seq:`` are preferable to ``if len(seq):`` and ``if not len(seq):`` respectively.
* When handling integers, implicit false may involve more risk than benefit (i.e., accidentally handling ``None`` as 0). You may compare a value which is known to be an integer (and is not the result of ``len()``) against the integer 0.

  .. code-block:: python

      Yes: if not users:
               print('no users')

           if foo == 0:
               self.handle_zero()

           if i % 10 == 0:
               self.handle_multiple_of_ten()

           def f(x=None):
               if x is None:
                   x = []

  .. code-block:: python

      No:  if len(users) == 0:
               print('no users')

           if foo is not None and not foo:
               self.handle_zero()

           if not i % 10:
               self.handle_multiple_of_ten()

           def f(x=None):
               x = x or []

* Note that ``'0'`` (i.e., ``0`` as string) evaluates to true.

2.15 Deprecated Language Features
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Use string methods instead of the ``string`` module where possible. Use function call syntax instead of ``apply``. Use list comprehensions and ``for`` loops instead of ``filter`` and ``map`` when the function argument would have been an inlined lambda anyway. Use ``for`` loops instead of ``reduce``.

2.15.1 Definition
"""""""""""""""""

Current versions of Python provide alternative constructs that people find generally preferable.

2.15.2 Decision
"""""""""""""""

We do not use any Python version which does not support these features, so there is no reason not to use the new styles.

.. code-block:: python

    Yes: words = foo.split(':')

         [x[1] for x in my_list if x[2] == 5]

         map(math.sqrt, data)    # Ok. No inlined lambda expression.

         fn(*args, **kwargs)

.. code-block:: python

    No:  words = string.split(foo, ':')

         map(lambda x: x[1], filter(lambda x: x[2] == 5, my_list))

         apply(fn, args, kwargs)