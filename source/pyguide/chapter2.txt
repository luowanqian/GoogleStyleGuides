2. Python Language Rules
------------------------

2.1 Lint
^^^^^^^^

Run ``pylint`` over your code.

2.1.1 Definition
""""""""""""""""

``pylint`` is a tool for finding bugs and style problems in Python source code. It finds problems that are typically caught by a compiler for less dynamic languages like C and C++. Because of the dynamic nature of Python, some warnings may be incorrect; however, spurious warnings should be fairly infrequent.

2.1.2 Pros
""""""""""

Catches easy-to-miss errors like typos, using-vars-before-assignment, etc.

2.1.3 Cons
""""""""""

``pylint`` isn’t perfect. To take advantage of it, we’ll need to sometimes: a) Write around it b) Suppress its warnings or c) Improve it.

2.1.4 Decision
""""""""""""""

Make sure you run ``pylint`` on your code.

Suppress warnings if they are inappropriate so that other issues are not hidden. To suppress warnings, you can set a line-level comment:

.. code-block:: python

    dict = 'something awful'  # Bad Idea... pylint: disable=redefined-builtin

``pylint`` warnings are each identified by symbolic name (``empty-docstring``) Google-specific warnings start with ``g-``.

If the reason for the suppression is not clear from the symbolic name, add an explanation.

Suppressing in this way has the advantage that we can easily search for suppressions and revisit them.

You can get a list of ``pylint`` warnings by doing:

.. code-block:: python

    pylint --list-msgs

To get more information on a particular message, use:

.. code-block:: python

    pylint --help-msg=C6409

Prefer ``pylint: disable`` to the deprecated older form ``pylint: disable-msg``.

Unused argument warnings can be suppressed by deleting the variables at the beginning of the function. Always include a comment explaining why you are deleting it. “Unused.” is sufficient. For example:

.. code-block:: python

    def viking_cafe_order(spam, beans, eggs=None):
        del beans, eggs  # Unused by vikings.
        return spam + spam + spam

Other common forms of suppressing this warning include using '``_``' as the identifier for the unused argument, prefixing the argument name with '``unused_``', or assigning them to '``_``'. These forms are allowed but no longer encouraged. The first two break callers that pass arguments by name, while the last does not enforce that the arguments are actually unused.

2.2 Imports
^^^^^^^^^^^

Use ``import`` statements for packages and modules only, not for individual classes or functions. Note that there is an explicit exemption for imports from the `typing module <https://google.github.io/styleguide/pyguide.html#typing-imports>`_.

2.2.1 Definition
""""""""""""""""

Reusability mechanism for sharing code from one module to another.

2.2.2 Pros
""""""""""

The namespace management convention is simple. The source of each identifier is indicated in a consistent way; ``x.Obj`` says that object ``Obj`` is defined in module ``x``.

2.2.3 Cons
""""""""""

Module names can still collide. Some module names are inconveniently long.

2.2.4 Decision
""""""""""""""

* Use ``import x`` for importing packages and modules.
* Use ``from x import y`` where ``x`` is the package prefix and ``y`` is the module name with no prefix.
* Use ``from x import y as z`` if two modules named ``y`` are to be imported or if ``y`` is an inconveniently long name.
* Use ``import y as z`` only when ``z`` is a standard abbreviation (e.g., ``np`` for ``numpy``).

For example the module ``sound.effects.echo`` may be imported as follows:

.. code-block:: python

   from sound.effects import echo
   ...
   echo.EchoFilter(input, output, delay=0.7, atten=4)

Do not use relative names in imports. Even if the module is in the same package, use the full package name. This helps prevent unintentionally importing a package twice.

Imports from the `typing module <https://google.github.io/styleguide/pyguide.html#typing-imports>`_ are exempt from this rule.

2.3 Packages
^^^^^^^^^^^^

Import each module using the full pathname location of the module.

2.3.1 Pros
""""""""""

Avoids conflicts in module names or incorrect imports due to the module search path not being what the author expected. Makes it easier to find modules.

2.3.2 Cons
""""""""""

Makes it harder to deploy code because you have to replicate the package hierarchy. Not really a problem with modern deployment mechanisms.

2.3.3 Decision
""""""""""""""

All new code should import each module by its full package name.

Imports should be as follows:

Yes:

.. code-block:: python

    # Reference absl.flags in code with the complete name (verbose).
    import absl.flags
    from doctor.who import jodie

    FLAGS = absl.flags.FLAGS

.. code-block:: python

    # Reference flags in code with just the module name (common).
    from absl import flags
    from doctor.who import jodie

    FLAGS = flags.FLAGS

No: (assume this file lives in ``doctor/who/`` where ``jodie.py`` also exists)

.. code-block:: python

    # Unclear what module the author wanted and what will be imported.  The actual
    # import behavior depends on external factors controlling sys.path.
    # Which possible jodie module did the author intend to import?
    import jodie

The directory the main binary is located in should not be assumed to be in ``sys.path`` despite that happening in some environments. This being the case, code should assume that ``import jodie`` refers to a third party or top level package named ``jodie``, not a local ``jodie.py``.

2.4 Exceptions
^^^^^^^^^^^^^^

Exceptions are allowed but must be used carefully.

2.4.1 Definition
""""""""""""""""

Exceptions are a means of breaking out of the normal flow of control of a code block to handle errors or other exceptional conditions.

2.4.2 Pros
""""""""""

The control flow of normal operation code is not cluttered by error-handling code. It also allows the control flow to skip multiple frames when a certain condition occurs, e.g., returning from N nested functions in one step instead of having to carry-through error codes.

2.4.3 Cons
""""""""""

May cause the control flow to be confusing. Easy to miss error cases when making library calls.

2.4.4 Decision
""""""""""""""

Exceptions must follow certain conditions:

* Raise exceptions like this: ``raise MyError('Error message')`` or ``raise MyError()``. Do not use the two-argument form (``raise MyError, 'Error message'``).
* Make use of built-in exception classes when it makes sense. For example, raise a ``ValueError`` if you were passed a negative number but were expecting a positive one. Do not use ``assert`` statements for validating argument values of a public API. ``assert`` is used to ensure internal correctness, not to enforce correct usage nor to indicate that some unexpected event occurred. If an exception is desired in the latter cases, use a raise statement. For example:

  .. code-block:: python

    Yes:
      def connect_to_next_port(self, minimum):
        """Connects to the next available port.

        Args:
          minimum: A port value greater or equal to 1024.
        Raises:
          ValueError: If the minimum port specified is less than 1024.
          ConnectionError: If no available port is found.
        Returns:
          The new minimum port.
        """
        if minimum < 1024:
          raise ValueError('Minimum port must be at least 1024, not %d.' % (minimum,))
        port = self._find_next_open_port(minimum)
        if not port:
          raise ConnectionError('Could not connect to service on %d or higher.' % (minimum,))
        assert port >= minimum, 'Unexpected port %d when minimum was %d.' % (port, minimum)
        return port

  .. code-block:: python

    No:
      def connect_to_next_port(self, minimum):
        """Connects to the next available port.

        Args:
          minimum: A port value greater or equal to 1024.
        Returns:
          The new minimum port.
        """
        assert minimum >= 1024, 'Minimum port must be at least 1024.'
        port = self._find_next_open_port(minimum)
        assert port is not None
        return port

* Libraries or packages may define their own exceptions. When doing so they must inherit from an existing exception class. Exception names should end in ``Error`` and should not introduce stutter (``foo.FooError``).
* Never use catch-all ``except``: statements, or catch ``Exception`` or ``StandardError``, unless you are re-raising the exception or in the outermost block in your thread (and printing an error message). Python is very tolerant in this regard and ``except:`` will really catch everything including misspelled names, sys.exit() calls, Ctrl+C interrupts, unittest failures and all kinds of other exceptions that you simply don’t want to catch.
* Minimize the amount of code in a ``try``/``except`` block. The larger the body of the ``try``, the more likely that an exception will be raised by a line of code that you didn’t expect to raise an exception. In those cases, the ``try``/``except`` block hides a real error.
* Use the ``finally`` clause to execute code whether or not an exception is raised in the ``try`` block. This is often useful for cleanup, i.e., closing a file.
* When capturing an exception, use ``as`` rather than a comma. For example:

  .. code-block:: python

    try:
      raise Error()
    except Error as error:
      pass