3. Python Style Rules
---------------------

3.1 Semicolons
^^^^^^^^^^^^^^

Do not terminate your lines with semicolons, and do not use semicolons to put two statements on the same line.

.. _3-2-Line-Length:

3.2 Line length
^^^^^^^^^^^^^^^

Maximum line length is 80 characters.

Exceptions:

* Long import statements.
* URLs, pathnames, or long flags in comments.
* Long string module level constants not containing whitespace that would be inconvenient to split across lines such as URLs or pathnames.
* Pylint disable comments. (e.g.: ``# pylint: disable=invalid-name``)

Do not use backslash line continuation except for ``with`` statements requiring three or more context managers.

Make use of Python’s `implicit line joining inside parentheses, brackets and braces <http://docs.python.org/reference/lexical_analysis.html#implicit-line-joining>`_. If necessary, you can add an extra pair of parentheses around an expression.

.. code-block:: python

    Yes: foo_bar(self, width, height, color='black', design=None, x='foo',
                 emphasis=None, highlight=0)

         if (width == 0 and height == 0 and
             color == 'red' and emphasis == 'strong'):

When a literal string won’t fit on a single line, use parentheses for implicit line joining.

.. code-block:: python

    x = ('This will build a very long long '
         'long long long long long long string')

Within comments, put long URLs on their own line if necessary.

.. code-block:: python

    Yes:  # See details at
          # http://www.example.com/us/developer/documentation/api/content/v2.0/csv_file_name_extension_full_specification.html

.. code-block:: python

    No:  # See details at
         # http://www.example.com/us/developer/documentation/api/content/\
         # v2.0/csv_file_name_extension_full_specification.html

It is permissible to use backslash continuation when defining a ``with`` statement whose expressions span three or more lines. For two lines of expressions, use a nested ``with`` statement:

.. code-block:: python

    Yes:  with very_long_first_expression_function() as spam, \
               very_long_second_expression_function() as beans, \
               third_thing() as eggs:
              place_order(eggs, beans, spam, beans)

.. code-block:: python

    No:  with VeryLongFirstExpressionFunction() as spam, \
              VeryLongSecondExpressionFunction() as beans:
           PlaceOrder(eggs, beans, spam, beans)

.. code-block:: python

    Yes:  with very_long_first_expression_function() as spam:
              with very_long_second_expression_function() as beans:
                  place_order(beans, spam)

Make note of the indentation of the elements in the line continuation examples above; see the :ref:`indentation <3-4-Indentation>` section for explanation.

3.3 Parentheses
^^^^^^^^^^^^^^^

Use parentheses sparingly.

It is fine, though not required, to use parentheses around tuples. Do not use them in return statements or conditional statements unless using parentheses for implied line continuation or to indicate a tuple.

.. code-block:: python

    Yes: if foo:
             bar()
         while x:
             x = bar()
         if x and y:
            bar()
         if not x:
            bar()
         # For a 1 item tuple the ()s are more visually obvious than the comma.
         onesie = (foo,)
         return foo
         return spam, beans
         return (spam, beans)
         for (x, y) in dict.items(): ...

.. code-block:: python

    No: if (x):
            bar()
        if not(x):
            bar()
        return (foo)

.. _3-4-Indentation:

3.4 Indentation
^^^^^^^^^^^^^^^

Indent your code blocks with 4 spaces.

Never use tabs or mix tabs and spaces. In cases of implied line continuation, you should align wrapped elements either vertically, as per the examples in the :ref:`line length <3-2-Line-Length>` section; or using a hanging indent of 4 spaces, in which case there should be nothing after the open parenthesis or bracket on the first line.

.. code-block:: python

    Yes:   # Aligned with opening delimiter
           foo = long_function_name(var_one, var_two,
                                    var_three, var_four)
           meal = (spam,
                   beans)

           # Aligned with opening delimiter in a dictionary
           foo = {
               long_dictionary_key: value1 +
                                    value2,
               ...
           }

           # 4-space hanging indent; nothing on first line
           foo = long_function_name(
               var_one, var_two, var_three,
               var_four)
           meal = (
                spam,
                beans)

           # 4-space hanging indent in a dictionary
           foo = {
               long_dictionary_key:
                   long_dictionary_value,
               ...
           }

.. code-block:: python

    No:    # Stuff on first line forbidden
           foo = long_function_name(var_one, var_two,
               var_three, var_four)
           meal = (spam,
               beans)

           # 2-space hanging indent forbidden
           foo = long_function_name(
             var_one, var_two, var_three,
             var_four)

           # No hanging indent in a dictionary
           foo = {
               long_dictionary_key:
               long_dictionary_value,
               ...
           }

3.4.1 Trailing commas in sequences of items?
""""""""""""""""""""""""""""""""""""""""""""

Trailing commas in sequences of items are recommended only when the closing container token ``]``, ``)``, or ``}`` does not appear on the same line as the final element. The presence of a trailing comma is also used as a hint to our Python code auto-formatter `YAPF`_ to direct it to auto-format the container of items to one item per line when the ``,`` after the final element is present.

.. code-block:: python

    Yes:   golomb3 = [0, 1, 3]
    Yes:   golomb4 = [
               0,
               1,
               4,
               6,
           ]

.. code-block:: python

    No:    golomb4 = [
               0,
               1,
               4,
               6
           ]

3.5 Blank Lines
^^^^^^^^^^^^^^^

Two blank lines between top-level definitions, be they function or class definitions. One blank line between method definitions and between the ``class`` line and the first method. No blank line following a ``def`` line. Use single blank lines as you judge appropriate within functions or methods.

3.8 Comments and Docstrings
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Be sure to use the right style for module, function, method docstrings and inline comments.

3.8.1 Docstrings
""""""""""""""""

Python uses *docstrings* to document code. A docstring is a string that is the first statement in a package, module, class or function. These strings can be extracted automatically through the ``__doc__`` member of the object and are used by ``pydoc``. (Try running ``pydoc`` on your module to see how it looks.) Always use the three double-quote ``"""`` format for docstrings (per `PEP 257 <https://www.google.com/url?sa=D&q=http://www.python.org/dev/peps/pep-0257/>`_). A docstring should be organized as a summary line (one physical line) terminated by a period, question mark, or exclamation point, followed by a blank line, followed by the rest of the docstring starting at the same cursor position as the first quote of the first line. There are more formatting guidelines for docstrings below.

3.8.2 Modules
"""""""""""""

Every file should contain license boilerplate. Choose the appropriate boilerplate for the license used by the project (for example, Apache 2.0, BSD, LGPL, GPL)

3.8.3 Functions and Methods
"""""""""""""""""""""""""""

A function must have a docstring, unless it meets all of the following criteria:

* not externally visible
* very short
* obvious

A docstring should give enough information to write a call to the function without reading the function’s code. The docstring should be descriptive (``"""Fetches rows from a Bigtable."""``) rather than imperative ("""Fetch rows from a Bigtable."""). A docstring should describe the function’s calling syntax and its semantics, not its implementation. For tricky code, comments alongside the code are more appropriate than using docstrings.

A method that overrides a method from a base class may have a simple docstring sending the reader to its overridden method’s docstring, such as ``"""See base class."""``. The rationale is that there is no need to repeat in many places documentation that is already present in the base method’s docstring. However, if the overriding method’s behavior is substantially different from the overridden method, or details need to be provided (e.g., documenting additional side effects), a docstring with at least those differences is required on the overriding method.

Certain aspects of a function should be documented in special sections, listed below. Each section begins with a heading line, which ends with a colon. Sections should be indented two spaces, except for the heading.

.. _doc-function-args:

Args:
    List each parameter by name. A description should follow the name, and be separated by a colon and a space. If the description is too long to fit on a single 80-character line, use a hanging indent of 2 or 4 spaces (be consistent with the rest of the file).

    The description should include required type(s) if the code does not contain a corresponding type annotation.

    If a function accepts ``*foo`` (variable length argument lists) and/or ``**bar`` (arbitrary keyword arguments), they should be listed as ``*foo`` and ``**bar``.

Returns: (or Yields: for generators)
    Describe the type and semantics of the return value. If the function only returns None, this section is not required. It may also be omitted if the docstring starts with Returns or Yields (e.g. ``"""Returns row from Bigtable as a tuple of strings."""``) and the opening sentence is sufficient to describe return value.

Raises:
    List all exceptions that are relevant to the interface.

.. code-block:: python

    def fetch_bigtable_rows(big_table, keys, other_silly_variable=None):
        """Fetches rows from a Bigtable.

        Retrieves rows pertaining to the given keys from the Table instance
        represented by big_table.  Silly things may happen if
        other_silly_variable is not None.

        Args:
            big_table: An open Bigtable Table instance.
            keys: A sequence of strings representing the key of each table row
                to fetch.
            other_silly_variable: Another optional variable, that has a much
                longer name than the other args, and which does nothing.

        Returns:
            A dict mapping keys to the corresponding table row data
            fetched. Each row is represented as a tuple of strings. For
            example:

            {'Serak': ('Rigel VII', 'Preparer'),
            'Zim': ('Irk', 'Invader'),
            'Lrrr': ('Omicron Persei 8', 'Emperor')}

            If a key from the keys argument is missing from the dictionary,
            then that row was not found in the table.

        Raises:
            IOError: An error occurred accessing the bigtable.Table object.
        """

3.8.4 Classes
"""""""""""""

Classes should have a docstring below the class definition describing the class. If your class has public attributes, they should be documented here in an ``Attributes`` section and follow the same formatting as a :ref:`function’s Args <doc-function-args>` section.

.. code-block:: python

    class SampleClass(object):
        """Summary of class here.

        Longer class information....
        Longer class information....

        Attributes:
            likes_spam: A boolean indicating if we like SPAM or not.
            eggs: An integer count of the eggs we have laid.
        """

        def __init__(self, likes_spam=False):
            """Inits SampleClass with blah."""
            self.likes_spam = likes_spam
            self.eggs = 0

        def public_method(self):
            """Performs operation blah."""

3.8.5 Block and Inline Comments
"""""""""""""""""""""""""""""""

The final place to have comments is in tricky parts of the code. If you’re going to have to explain it at the next `code review <http://en.wikipedia.org/wiki/Code_review>`_, you should comment it now. Complicated operations get a few lines of comments before the operations commence. Non-obvious ones get comments at the end of the line.

.. code-block:: python

    # We use a weighted dictionary search to find out where i is in
    # the array.  We extrapolate position based on the largest num
    # in the array and the array size and then do binary search to
    # get the exact number.

    if i & (i-1) == 0:  # True if i is 0 or a power of 2.

To improve legibility, these comments should be at least 2 spaces away from the code.

On the other hand, never describe the code. Assume the person reading the code knows Python (though not what you’re trying to do) better than you do.

.. code-block:: python

    # BAD COMMENT: Now go through the b array and make sure whenever i occurs
    # the next element is i+1

3.8.6 Punctuation, Spelling and Grammar
"""""""""""""""""""""""""""""""""""""""

Pay attention to punctuation, spelling, and grammar; it is easier to read well-written comments than badly written ones.

Comments should be as readable as narrative text, with proper capitalization and punctuation. In many cases, complete sentences are more readable than sentence fragments. Shorter comments, such as comments at the end of a line of code, can sometimes be less formal, but you should be consistent with your style.

Although it can be frustrating to have a code reviewer point out that you are using a comma when you should be using a semicolon, it is very important that source code maintain a high level of clarity and readability. Proper punctuation, spelling, and grammar help with that goal.

3.9 Classes
^^^^^^^^^^^

If a class inherits from no other base classes, explicitly inherit from ``object``. This also applies to nested classes.

.. code-block:: python

    Yes: class SampleClass(object):
             pass


         class OuterClass(object):

             class InnerClass(object):
                 pass


         class ChildClass(ParentClass):
             """Explicitly inherits from another class already."""

.. code-block:: python

    No: class SampleClass:
            pass


        class OuterClass:

            class InnerClass:
                pass

Inheriting from ``object`` is needed to make properties work properly in Python 2 and can protect your code from potential incompatibility with Python 3. It also defines special methods that implement the default semantics of objects including ``__new__``, ``__init__``, ``__delattr__``, ``__getattribute__``, ``__setattr__``, ``__hash__``, ``__repr__``, and ``__str__``.

3.10 Strings
^^^^^^^^^^^^

Use the ``format`` method or the ``%`` operator for formatting strings, even when the parameters are all strings. Use your best judgement to decide between ``+`` and ``%`` (or ``format``) though.

.. code-block:: python

    Yes: x = a + b
         x = '%s, %s!' % (imperative, expletive)
         x = '{}, {}'.format(first, second)
         x = 'name: %s; score: %d' % (name, n)
         x = 'name: {}; score: {}'.format(name, n)
         x = f'name: {name}; score: {n}'  # Python 3.6+

.. code-block:: python

    No: x = '%s%s' % (a, b)  # use + in this case
        x = '{}{}'.format(a, b)  # use + in this case
        x = first + ', ' + second
        x = 'name: ' + name + '; score: ' + str(n)

Avoid using the ``+`` and ``+=`` operators to accumulate a string within a loop. Since strings are immutable, this creates unnecessary temporary objects and results in quadratic rather than linear running time. Instead, add each substring to a list and ``''.join`` the list after the loop terminates (or, write each substring to a ``io.BytesIO`` buffer).

.. code-block:: python

    Yes: items = ['<table>']
         for last_name, first_name in employee_list:
             items.append('<tr><td>%s, %s</td></tr>' % (last_name, first_name))
         items.append('</table>')
         employee_table = ''.join(items)

.. code-block:: python

    No: employee_table = '<table>'
        for last_name, first_name in employee_list:
            employee_table += '<tr><td>%s, %s</td></tr>' % (last_name, first_name)
        employee_table += '</table>'

Be consistent with your choice of string quote character within a file. Pick ``'`` or ``"`` and stick with it. It is okay to use the other quote character on a string to avoid the need to ``\\`` escape within the string. ``gpylint`` enforces this.

.. code-block:: python

    Yes:
      Python('Why are you hiding your eyes?')
      Gollum("I'm scared of lint errors.")
      Narrator('"Good!" thought a happy Python reviewer.')

.. code-block:: python

    No:
      Python("Why are you hiding your eyes?")
      Gollum('The lint. It burns. It burns us.')
      Gollum("Always the great lint. Watching. Watching.")

Prefer ``"""`` for multi-line strings rather than ``'''``. Projects may choose to use ``'''`` for all non-docstring multi-line strings if and only if they also use `'` for regular strings. Docstrings must use ``"""`` regardless. Note that it is often cleaner to use implicit line joining since multi-line strings do not flow with the indentation of the rest of the program:

.. code-block:: python

    Yes:
    print("This is much nicer.\n"
          "Do it this way.\n")

.. code-block:: python

      No:
        print("""This is pretty ugly.
    Don't do this.
    """)

3.11 Files and Sockets
^^^^^^^^^^^^^^^^^^^^^^

Explicitly close files and sockets when done with them.

Leaving files, sockets or other file-like objects open unnecessarily has many downsides:

* They may consume limited system resources, such as file descriptors. Code that deals with many such objects may exhaust those resources unnecessarily if they’re not returned to the system promptly after use.
* Holding files open may prevent other actions such as moving or deleting them.
* Files and sockets that are shared throughout a program may inadvertently be read from or written to after logically being closed. If they are actually closed, attempts to read or write from them will throw exceptions, making the problem known sooner.

Furthermore, while files and sockets are automatically closed when the file object is destructed, tying the lifetime of the file object to the state of the file is poor practice:

* There are no guarantees as to when the runtime will actually run the file’s destructor. Different Python implementations use different memory management techniques, such as delayed Garbage Collection, which may increase the object’s lifetime arbitrarily and indefinitely.
* Unexpected references to the file, e.g. in globals or exception tracebacks, may keep it around longer than intended.

The preferred way to manage files is using the `“with” statement <http://docs.python.org/reference/compound_stmts.html#the-with-statement>`_:

.. code-block:: python

    with open("hello.txt") as hello_file:
        for line in hello_file:
            print(line)

For file-like objects that do not support the “with” statement, use ``contextlib.closing()``:

.. code-block:: python

    import contextlib

    with contextlib.closing(urllib.urlopen("http://www.python.org/")) as front_page:
        for line in front_page:
            print(line)

3.12 TODO Comments
^^^^^^^^^^^^^^^^^^

Use ``TODO`` comments for code that is temporary, a short-term solution, or good-enough but not perfect.

A ``TODO`` comment begins with the string ``TODO`` in all caps and a parenthesized name, e-mail address, or other identifier of the person or issue with the best context about the problem. This is followed by an explanation of what there is to do.

The purpose is to have a consistent ``TODO`` format that can be searched to find out how to get more details. A ``TODO`` is not a commitment that the person referenced will fix the problem. Thus when you create a ``TODO``, it is almost always your name that is given.

.. code-block:: python

    # TODO(kl@gmail.com): Use a "*" here for string repetition.
    # TODO(Zeke) Change this to use relations.

If your ``TODO`` is of the form “At a future date do something” make sure that you either include a very specific date (“Fix by November 2009”) or a very specific event (“Remove this code when all clients can handle XML responses.”).

3.13 Imports formatting
^^^^^^^^^^^^^^^^^^^^^^^

Imports should be on separate lines.

E.g.:

.. code-block:: python

    Yes: import os
         import sys

.. code-block:: python

    No:  import os, sys

Imports are always put at the top of the file, just after any module comments and docstrings and before module globals and constants. Imports should be grouped from most generic to least generic:

1. Python standard library imports. For example:

  .. code-block:: python

      import sys
 
2. `third-party <https://pypi.org/>`_ module or package imports. For example:

  .. code-block:: python

      import tensorflow as tf

3. Code repository sub-package imports. For example:

  .. code-block:: python

      from otherproject.ai import mind

4. Deprecated: application-specific imports that are part of the same top level sub-package as this file. For example:

  .. code-block:: python

      from myproject.backend.hgwells import time_machine

  You may find older Google Python Style code doing this, but it is no longer required. **New code is encouraged not to bother with this.** Simply treat application-specific sub-package imports the same as other sub-package imports.

Within each grouping, imports should be sorted lexicographically, ignoring case, according to each module’s full package path. Code may optionally place a blank line between import sections.

.. code-block:: python

    import collections
    import queue
    import sys

    from absl import app
    from absl import flags
    import bs4
    import cryptography
    import tensorflow as tf

    from book.genres import scifi
    from myproject.backend.hgwells import time_machine
    from myproject.backend.state_machine import main_loop
    from otherproject.ai import body
    from otherproject.ai import mind
    from otherproject.ai import soul

    # Older style code may have these imports down here instead:
    #from myproject.backend.hgwells import time_machine
    #from myproject.backend.state_machine import main_loop

3.14 Statements
^^^^^^^^^^^^^^^

Generally only one statement per line.

However, you may put the result of a test on the same line as the test only if the entire statement fits on one line. In particular, you can never do so with ``try``/``except`` since the ``try`` and ``except`` can’t both fit on the same line, and you can only do so with an ``if`` if there is no ``else``.

.. code-block:: python

    Yes:

      if foo: bar(foo)

.. code-block:: python

    No:

      if foo: bar(foo)
      else:   baz(foo)

      try:               bar(foo)
      except ValueError: baz(foo)

      try:
          bar(foo)
      except ValueError: baz(foo)

3.15 Access Control
^^^^^^^^^^^^^^^^^^^

If an accessor function would be trivial, you should use public variables instead of accessor functions to avoid the extra cost of function calls in Python. When more functionality is added you can use ``property`` to keep the syntax consistent.

On the other hand, if access is more complex, or the cost of accessing the variable is significant, you should use function calls (following the :ref:`Naming <3-16-Naming>` guidelines) such as ``get_foo()`` and ``set_foo()``. If the past behavior allowed access through a property, do not bind the new accessor functions to the property. Any code still attempting to access the variable by the old method should break visibly so they are made aware of the change in complexity.

.. _3-16-Naming:

3.16 Naming
^^^^^^^^^^^

``module_name``, ``package_name``, ``ClassName``, ``method_name``, ``ExceptionName``, ``function_name``, ``GLOBAL_CONSTANT_NAME``, ``global_var_name``, ``instance_var_name``, ``function_parameter_name``, ``local_var_name``.

Function names, variable names, and filenames should be descriptive; eschew abbreviation. In particular, do not use abbreviations that are ambiguous or unfamiliar to readers outside your project, and do not abbreviate by deleting letters within a word.

Always use a ``.py`` filename extension. Never use dashes.

3.16.1 Names to Avoid
"""""""""""""""""""""

* single character names except for counters or iterators. You may use “e” as an exception identifier in try/except statements.
* dashes (-) in any package/module name
* ``__double_leading_and_trailing_underscore__`` names (reserved by Python)

3.16.2 Naming Convention
""""""""""""""""""""""""

* “Internal” means internal to a module, or protected or private within a class.

* Prepending a single underscore (``_``) has some support for protecting module variables and functions (not included with ``from module import *``). While prepending a double underscore (``__`` aka “dunder”) to an instance variable or method effectively makes the variable or method private to its class (using name mangling) we discourage its use as it impacts readability and testability and isn’t really private.

* Place related classes and top-level functions together in a module. Unlike Java, there is no need to limit yourself to one class per module.

* Use CapWords for class names, but lower_with_under.py for module names. Although there are some old modules named CapWords.py, this is now discouraged because it’s confusing when the module happens to be named after a class. (“wait – did I write ``import StringIO`` or ``from StringIO import StringIO``?”)

* Underscores may appear in unittest method names starting with ``test`` to separate logical components of the name, even if those components use CapWords. One possible pattern is ``test<MethodUnderTest>_<state>``; for example ``testPop_EmptyStack`` is okay. There is no One Correct Way to name test methods.

3.16.3 File Naming
""""""""""""""""""

Python filenames must have a ``.py`` extension and must not contain dashes (``-``). This allows them to be imported and unittested. If you want an executable to be accessible without the extension, use a symbolic link or a simple bash wrapper containing ``exec "$0.py" "$@"``.

3.16.4 Guidelines derived from Guido’s Recommendations
""""""""""""""""""""""""""""""""""""""""""""""""""""""

.. list-table::
    :widths: 25 25 50
    :header-rows: 1

    * - Type
      - Public
      - Internal

    * - Packages
      - ``lower_with_under``
      -

    * - Modules
      - ``lower_with_under``
      - ``_lower_with_under``

    * - Classes
      - ``CapWords``
      - ``_CapWords``

    * - Exceptions
      - ``CapWords``
      -

    * - Functions
      - ``lower_with_under()``
      - ``_lower_with_under()``

    * - Global/Class Constants
      - ``CAPS_WITH_UNDER``
      - ``_CAPS_WITH_UNDER``

    * - Global/Class Variables
      - ``lower_with_under``
      - ``_lower_with_under``

    * - Instance Variables
      - ``lower_with_under``
      - ``_lower_with_under`` (protected)

    * - Method Names
      - ``lower_with_under()``
      - ``_lower_with_under()`` (protected)

    * - Function/Method Parameters
      - ``lower_with_under``
      -

    * - Local Variables
      - ``lower_with_under``
      -

While Python supports making things private by using a leading double underscore ``__`` (aka. “dunder”) prefix on a name, this is discouraged. Prefer the use of a single underscore. They are easier to type, read, and to access from small unittests. Lint warnings take care of invalid access to protected members.

.. _3-17-Main:

3.17 Main
^^^^^^^^^

Even a file meant to be used as an executable should be importable and a mere import should not have the side effect of executing the program’s main functionality. The main functionality should be in a ``main()`` function.

In Python, ``pydoc`` as well as unit tests require modules to be importable. Your code should always check ``if __name__ == '__main__'`` before executing your main program so that the main program is not executed when the module is imported.

.. code-block:: python

    def main():
        ...

    if __name__ == '__main__':
        main()

All code at the top level will be executed when the module is imported. Be careful not to call functions, create objects, or perform other operations that should not be executed when the file is being ``pydoc`` ed.

3.18 Function length
^^^^^^^^^^^^^^^^^^^^

Prefer small and focused functions.

We recognize that long functions are sometimes appropriate, so no hard limit is placed on function length. If a function exceeds about 40 lines, think about whether it can be broken up without harming the structure of the program.

Even if your long function works perfectly now, someone modifying it in a few months may add new behavior. This could result in bugs that are hard to find. Keeping your functions short and simple makes it easier for other people to read and modify your code.

You could find long and complicated functions when working with some code. Do not be intimidated by modifying existing code: if working with such a function proves to be difficult, you find that errors are hard to debug, or you want to use a piece of it in several different contexts, consider breaking up the function into smaller and more manageable pieces.

3.19 Type Annotations
^^^^^^^^^^^^^^^^^^^^^

3.19.1 General Rules
""""""""""""""""""""

* Familiarize yourself with `PEP-484 <https://www.python.org/dev/peps/pep-0484/>`_.
* In methods, only annotate ``self``, or ``cls`` if it is necessary for proper type information. e.g., ``@classmethod def create(cls: Type[T]) -> T: return cls()``
* If any other variable or a returned type should not be expressed, use Any.
* You are not required to annotate all the functions in a module.

  * At least annotate your public APIs.
  * Use judgment to get to a good balance between safety and clarity on the one hand, and flexibility on the other.
  * Annotate code that is prone to type-related errors (previous bugs or complexity).
  * Annotate code that is hard to understand.
  * Annotate code as it becomes stable from a types perspective. In many cases, you can annotate all the functions in mature code without losing too much flexibility.

3.19.2 Line Breaking
""""""""""""""""""""

Try to follow the existing :ref:`indentation <3-4-Indentation>` rules.

After annotating, many function signatures will become “one parameter per line”.

.. code-block:: python

    def my_method(self,
                  first_var: int,
                  second_var: Foo,
                  third_var: Optional[Bar]) -> int:
      ...

Always prefer breaking between variables, and not for example between variable names and type annotations. However, if everything fits on the same line, go for it.

.. code-block:: python

    def my_method(self, first_var: int) -> int:
      ...

If the combination of the function name, the last parameter, and the return type is too long, indent by 4 in a new line.

.. code-block:: python

    def my_method(
        self, first_var: int) -> Tuple[MyLongType1, MyLongType1]:
      ...

When the return type does not fit on the same line as the last parameter, the preferred way is to indent the parameters by 4 on a new line and align the closing parenthesis with the def.

.. code-block:: python

    Yes:
    def my_method(
        self, **kw_args: Optional[MyLongType]
    ) -> Dict[OtherLongType, MyLongType]:
      ...

``pylint`` allows you to move the closing parenthesis to a new line and align with the opening one, but this is less readable.

.. code-block:: python

    No:
    def my_method(self,
                  **kw_args: Optional[MyLongType]
                 ) -> Dict[OtherLongType, MyLongType]:
      ...

As in the examples above, prefer not to break types. However, sometimes they are too long to be on a single line (try to keep sub-types unbroken).

.. code-block:: python

    def my_method(
        self,
        first_var: Tuple[List[MyLongType1],
                         List[MyLongType2]],
        second_var: List[Dict[
            MyLongType3, MyLongType4]]) -> None:
      ...

If a single name and type is too long, consider using an :ref:`alias <3-19-6-Type-Aliases>` for the type. The last resort is to break after the colon and indent by 4.

.. code-block:: python

    Yes:
    def my_function(
        long_variable_name:
            long_module_name.LongTypeName,
    ) -> None:
      ...

.. code-block:: python

    No:
    def my_function(
        long_variable_name: long_module_name.
            LongTypeName,
    ) -> None:
      ...

3.19.3 Forward Declarations
"""""""""""""""""""""""""""

If you need to use a class name from the same module that is not yet defined – for example, if you need the class inside the class declaration, or if you use a class that is defined below – use a string for the class name.

.. code-block:: python

    class MyClass(object):

      def __init__(self,
                   stack: List["MyClass"]) -> None:

3.19.4 Default Values
"""""""""""""""""""""

As per `PEP-008 <https://www.python.org/dev/peps/pep-0008/#other-recommendations>`_, use spaces around the ``=`` only for arguments that have both a type annotation and a default value.

.. code-block:: python

    Yes:
    def func(a: int = 0) -> int:
      ...

.. code-block:: python

    No:
    def func(a:int=0) -> int:
      ...

3.19.5 NoneType
"""""""""""""""

In the Python type system, ``NoneType`` is a “first class” type, and for typing purposes, ``None`` is an alias for ``NoneType``. If an argument can be ``None``, it has to be declared! You can use ``Union``, but if there is only one other type, use ``Optional``.

Use explicit ``Optional`` instead of implicit ``Optional``. Earlier versions of PEP 484 allowed ``a: Text = None`` to be interpretted ``as a: Optional[Text] = None``, but that is no longer the preferred behavior.

.. code-block:: python

    Yes:
    def func(a: Optional[Text], b: Optional[Text] = None) -> Text:
      ...
    def multiple_nullable_union(a: Union[None, Text, int]) -> Text
      ...

.. code-block:: python

    No:
    def nullable_union(a: Union[None, Text]) -> Text:
      ...
    def implicit_optional(a: Text = None) -> Text:
      ...

.. _3-19-6-Type-Aliases:

3.19.6 Type Aliases
"""""""""""""""""""

You can declare aliases of complex types. The name of an alias should be CapWorded. If the alias is used only in this module, it should be _Private.

For example, if the name of module together with the type is too long:

.. code-block:: python

    _ShortName = module_with_long_name.TypeWithLongName
    ComplexMap = Mapping[Text, List[Tuple[int, int]]]

Other examples are complex nested types and multiple return variables from a function (as a tuple).

3.19.7 Ignoring Types
"""""""""""""""""""""

You can disable type checking on a line with the special comment ``# type: ignore``.

``pytype`` has a disable option for specific errors (similar to lint):

.. code-block:: python

    # pytype: disable=attribute-error

3.19.8 Typing internal variables
""""""""""""""""""""""""""""""""

If an internal variable has a type that is hard or impossible to infer, you can supply it as a special comment:

.. code-block:: python

    a = SomeUndecoratedFunction()  # type: Foo

3.19.9 Tuples vs Lists
""""""""""""""""""""""

Unlike Lists, which can only have a single type, Tuples can have either a single repeated type or a set number of elements with different types. The latter is commonly used as return type from a function.

.. code-block:: python

    a = [1, 2, 3]  # type: List[int]
    b = (1, 2, 3)  # type: Tuple[int, ...]
    c = (1, "2", 3.5)  # type: Tuple[int, Text, float]

.. _3-19-10-TypeVar:

3.19.10 TypeVar
"""""""""""""""

The Python type system has `generics <https://www.python.org/dev/peps/pep-0484/#generics>`_. The factory function ``TypeVar`` is a common way to use them.

Example:

.. code-block:: python

    from typing import List, TypeVar
    T = TypeVar("T")
    ...
    def next(l: List[T]) -> T:
      return l.pop()

A TypeVar can be constrained:

.. code-block:: python

    AddableType = TypeVar("AddableType", int, float, Text)
    def add(a: AddableType, b: AddableType) -> AddableType:
      return a + b

A common predefined type variable in the ``typing`` module is ``AnyStr``. Use it for multiple annotations that can be ``bytes`` or ``unicode`` and must all be the same type.

.. code-block:: python

    from typing import AnyStr
    def check_length(x: AnyStr) -> AnyStr:
      if len(x) <= 42:
        return x
      raise ValueError()

3.19.11 String types
""""""""""""""""""""

The proper type for annotating strings depends on what versions of Python the code is intended for.

For Python 3 only code, prefer to use ``str``. ``Text`` is also acceptable. Be consistent in using one or the other.

For Python 2 compatible code, use ``Text``. In some rare cases, ``str`` may make sense; typically to aid compatiblity when the return types aren’t the same between the two Python versions. Avoid using ``unicode``: it doesn’t exist in Python 3.

The reason this discreprency exists is because ``str`` means different things depending on the Python version.

.. code-block:: python

    No:
    def py2_code(x: str) -> unicode:
      ...

For code that deals with binary data, use ``bytes``.

.. code-block:: python

    def deals_with_binary_data(x: bytes) -> bytes:
      ...

For Python 2 compatible code that processes text data (``str`` or ``unicode`` in Python 2, ``str`` in Python 3), use ``Text``. For Python 3 only code that process text data, prefer ``str``.

.. code-block:: python

    from typing import Text
    ...
    def py2_compatible(x: Text) -> Text:
      ...
    def py3_only(x: str) -> str:
      ...

If the type can be either bytes or text, use ``Union``, with the appropriate text type.

.. code-block:: python

    from typing import Text, Union
    ...
    def py2_compatible(x: Union[bytes, Text]) -> Union[bytes, Text]:
      ...
    def py3_only(x: Union[bytes, str]) -> Union[bytes, str]:
      ...

If all the string types of a function are always the same, for example if the return type is the same as the argument type in the code above, use :ref:`AnyStr <3-19-10-TypeVar>`.

Writing it like this will simplify the process of porting the code to Python 3.

.. _3-19-12-Imports-For-Typing:

3.19.12 Imports For Typing
""""""""""""""""""""""""""

For classes from the ``typing`` module, always import the class itself. You are explicitly allowed to import multiple specific classes on one line from the ``typing`` module. Ex:

.. code-block:: python

    from typing import Any, Dict, Optional

Given that this way of importing from ``typing`` adds items to the local namespace, any names in ``typing`` should be treated similarly to keywords, and not be defined in your Python code, typed or not. If there is a collision between a type and an existing name in a module, import it using ``import x as y``.

.. code-block:: python

    from typing import Any as AnyType

3.19.13 Conditional Imports
"""""""""""""""""""""""""""

Use conditional imports only in exceptional cases where the additional imports needed for type checking must be avoided at runtime. This pattern is discouraged; alternatives such as refactoring the code to allow top level imports should be preferred.

Imports that are needed only for type annotations can be placed within an ``if TYPE_CHECKING:`` block.

* Conditionally imported types need to be referenced as strings, to be forward compatible with Python 3.6 where the annotation expressions are actually evaluated.
* Only entities that are used solely for typing should be defined here; this includes aliases. Otherwise it will be a runtime error, as the module will not be imported at runtime.
* The block should be right after all the normal imports.
* There should be no empty lines in the typing imports list.
* Sort this list as if it were a regular imports list.

.. code-block:: python

    import typing
    if typing.TYPE_CHECKING:
      import sketch
    def f(x: "sketch.Sketch"): ...

3.19.14 Circular Dependencies
"""""""""""""""""""""""""""""

Circular dependencies that are caused by typing are code smells. Such code is a good candidate for refactoring. Although technically it is possible to keep circular dependencies, the build system will not let you do so because each module has to depend on the other.

Replace modules that create circular dependency imports with ``Any``. Set an :ref:`alias <3-19-6-Type-Aliases>` with a meaningful name, and use the real type name from this module (any attribute of Any is Any). Alias definitions should be separated from the last import by one line.

3.19.15 Generics
""""""""""""""""

When annotating, prefer to specify type parameters for generic types; otherwise, `the generics’ parameters will be assumed to be Any <https://www.python.org/dev/peps/pep-0484/#the-any-type>`_.

.. code-block:: python

    def get_names(employee_ids: List[int]) -> Dict[int, Any]:
      ...

.. code-block:: python

    # These are both interpreted as get_names(employee_ids: List[Any]) -> Dict[Any, Any]
    def get_names(employee_ids: list) -> Dict:
      ...

    def get_names(employee_ids: List) -> Dict:
      ...

If the best type parameter for a generic is ``Any``, make it explicit, but remember that in many cases :ref:`TypeVar <3-19-10-TypeVar>` might be more appropriate:

.. code-block:: python

    def get_names(employee_ids: List[Any]) -> Dict[Any, Text]:
      """Returns a mapping from employee ID to employee name for given IDs."""

.. code-block:: python

    T = TypeVar('T')
    def get_names(employee_ids: List[T]) -> Dict[T, Text]:
      """Returns a mapping from employee ID to employee name for given IDs."""